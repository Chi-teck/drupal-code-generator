<?php /** @noinspection ALL */

namespace PHPSTORM_META {

  override(
    \Drupal::service(0),
    map([
{% for service_id, class in services %}
      '{{ service_id }}' => '{{ class }}',
{% endfor %}
    ])
  );

  override(
    \Symfony\Component\DependencyInjection\ContainerInterface::get(0),
    map([
{% for service_id, class in services %}
      '{{ service_id }}' => '{{ class }}',
{% endfor %}
    ])
  );

{% for manager_class, plugin_class in plugins %}
{# Using map() to work around PhpStorm bug. #}
{# @see https://intellij-support.jetbrains.com/hc/en-us/community/posts/360001516519 #}
  override({{ manager_class }}::createInstance(), map(['' => '{{ plugin_class }}']));
  override({{ manager_class }}::getInstance(), map(['' => '{{ plugin_class }}|bool']));
{% endfor %}

  override(
    \Drupal\Core\Entity\EntityTypeManagerInterface::getStorage(0),
    map([
{% for entity_type_id, class in storages %}
      '{{ entity_type_id }}' => '{{ class }}',
{% endfor %}
    ])
  );

  override(
    \Drupal\Core\Entity\EntityTypeManagerInterface::getViewBuilder(0),
    map([
{% for entity_type_id, class in view_builders %}
      '{{ entity_type_id }}' => '{{ class }}',
{% endfor %}
    ])
  );

  override(
    \Drupal\Core\Entity\EntityTypeManagerInterface::getListBuilder(0),
    map([
{% for entity_type_id, class in list_builders %}
      '{{ entity_type_id }}' => '{{ class }}',
{% endfor %}
    ])
  );

  override(
    \Drupal\Core\Entity\EntityTypeManagerInterface::getAccessControlHandler(0),
    map([
{% for entity_type_id, class in access_controls %}
     '{{ entity_type_id }}' => '{{ class }}',
{% endfor %}
    ])
  );

{% for class in entity_classes %}
{# Using map() to work around PhpStorm bug. #}
{# @see https://intellij-support.jetbrains.com/hc/en-us/community/posts/360001516519 #}
  override({{ class }}::loadMultiple(), map(['' => '{{ class }}[]']));
  override({{ class }}::load(), map(['' => '{{ class }}']));
  override({{ class }}::create(), map(['' => '{{ class }}']));

{% endfor %}
  expectedReturnValues(
    \Drupal\Core\Entity\EntityInterface::save(),
    \SAVED_NEW,
    \SAVED_UPDATED
  );

  expectedArguments(
    \Drupal\Core\Entity\EntityViewBuilderInterface::view(),
    2,
    \Drupal\Core\Language\LanguageInterface::LANGCODE_NOT_SPECIFIED,
    \Drupal\Core\Language\LanguageInterface::LANGCODE_NOT_APPLICABLE,
    \Drupal\Core\Language\LanguageInterface::LANGCODE_DEFAULT,
    \Drupal\Core\Language\LanguageInterface::LANGCODE_SITE_DEFAULT
  );

  expectedArguments(
    \Drupal\Core\Messenger\MessengerInterface::addMessage(),
    1,
    \Drupal\Core\Messenger\MessengerInterface::TYPE_STATUS,
    \Drupal\Core\Messenger\MessengerInterface::TYPE_WARNING,
    \Drupal\Core\Messenger\MessengerInterface::TYPE_ERROR
  );

  expectedArguments(
    \Drupal\Core\File\FileSystemInterface::prepareDirectory(),
    1,
    \Drupal\Core\File\FileSystemInterface::CREATE_DIRECTORY,
    \Drupal\Core\File\FileSystemInterface::MODIFY_PERMISSIONS
  );

  registerArgumentsSet('file_system_exists_behaviour',
    \Drupal\Core\File\FileSystemInterface::EXISTS_RENAME,
    \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE,
    \Drupal\Core\File\FileSystemInterface::EXISTS_ERROR
  );

  expectedArguments(\Drupal\Core\File\FileSystemInterface::copy(), 2, argumentsSet('file_system_exists_behaviour'));
  expectedArguments(\Drupal\Core\File\FileSystemInterface::move(), 2, argumentsSet('file_system_exists_behaviour'));
  expectedArguments(\Drupal\Core\File\FileSystemInterface::saveData(), 2, argumentsSet('file_system_exists_behaviour'));
  expectedArguments(\Drupal\Core\File\FileSystemInterface::getDestinationFilename(), 1, argumentsSet('file_system_exists_behaviour'));
  expectedArguments(\Drupal\file\FileRepositoryInterface::file_copy(), 2, argumentsSet('file_system_exists_behaviour'));
  expectedArguments(\Drupal\file\FileRepositoryInterface::file_move(), 2, argumentsSet('file_system_exists_behaviour'));
  expectedArguments(\Drupal\file\FileRepositoryInterface::file_save_data(), 2, argumentsSet('file_system_exists_behaviour'));
  expectedArguments(\file_save_upload(), 4, argumentsSet('file_system_exists_behaviour'));
  expectedArguments(\system_retrieve_file(), 3, argumentsSet('file_system_exists_behaviour'));

  registerArgumentsSet('route_names',
{% for route_name in route_names %}
    '{{ route_name|raw }}',
{% endfor %}
  );

  expectedArguments(\Symfony\Component\Routing\RouteCollection::get(), 0, argumentsSet('route_names'));
  expectedArguments(\Symfony\Component\Routing\RouteCollection::remove(), 0, argumentsSet('route_names'));
  expectedArguments(\Drupal\Core\Url::__construct(), 0, argumentsSet('route_names'));
  expectedArguments(\Drupal\Core\Url::fromRoute(), 0, argumentsSet('route_names'));
  expectedArguments(\Drupal\Core\Link::createFromRoute(), 1, argumentsSet('route_names'));
  expectedReturnValues(\Drupal\Core\Url::getRouteName(), argumentsSet('route_names'));
  expectedReturnValues(\Drupal\Core\Routing\RouteMatchInterface::getRouteName(), argumentsSet('route_names'));
  expectedReturnValues(\Drupal\Core\Menu\ContextualLinkInterface::getRouteName(), argumentsSet('route_names'));
  expectedReturnValues(\Drupal\Core\Menu\LocalActionInterface::getRouteName(), argumentsSet('route_names'));
  expectedReturnValues(\Drupal\Core\Menu\LocalTaskInterface::getRouteName(), argumentsSet('route_names'));
  expectedReturnValues(\Drupal\Core\Menu\MenuLinkInterface::getRouteName(), argumentsSet('route_names'));
  expectedReturnValues(\Drupal\Core\Form\FormStateInterface::setRedirect(), argumentsSet('route_names'));

  registerArgumentsSet('config_names',
{% for config_name in config_names %}
    '{{ config_name }}',
{% endfor %}
  );

  expectedArguments(\Drupal\Core\Config\ConfigFactoryInterface::get(), 0, argumentsSet('config_names'));
  expectedArguments(\Drupal\Core\Config\ConfigFactoryInterface::getEditable(), 0, argumentsSet('config_names'));
  expectedArguments(\Drupal\Core\Config\ConfigFactoryInterface::reset(), 0, argumentsSet('config_names'));
  expectedArguments(\Drupal::config(), 0, argumentsSet('config_names'));

{% for definition in entity_fields %}

  {% set field_argument_set = 'fields_' ~ definition.type %}
  registerArgumentsSet('{{ field_argument_set }}',
  {% for field in definition.fields %}
    '{{ field }}',
  {% endfor %}
  );
  expectedArguments({{ definition.class }}::set(), 0, argumentsSet('{{ field_argument_set }}'));
  expectedArguments({{ definition.class }}::get(), 0, argumentsSet('{{ field_argument_set }}'));
  expectedArguments({{ definition.class }}::hasField(), 0, argumentsSet('{{ field_argument_set }}'));
  {% if definition.interface %}
  expectedArguments({{ definition.interface }}::set(), 0, argumentsSet('{{ field_argument_set }}'));
  expectedArguments({{ definition.interface }}::get(), 0, argumentsSet('{{ field_argument_set }}'));
  expectedArguments({{ definition.interface }}::hasField(), 0, argumentsSet('{{ field_argument_set }}'));
  {% endif %}
{% endfor %}

}
