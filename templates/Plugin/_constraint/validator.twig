{% import '@lib/di.twig' as di %}
<?php declare(strict_types = 1);

namespace Drupal\{{ machine_name }}\Plugin\Validation\Constraint;

{% sort %}
use Symfony\Component\Validator\Constraint;
use Symfony\Component\Validator\ConstraintValidator;
  {% if services %}
{{ di.use(services) }}
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
  {% endif %}
{% endsort %}

/**
 * Validates the {{ plugin_label }} constraint.
 */
final class {{ class }}Validator extends ConstraintValidator {% if services %}implements ContainerFactoryPluginInterface {% endif %}{

{% if services %}
  /**
   * Constructs a new {{ class }} instance.
   */
  public function __construct(
    array $configuration,
    $plugin_id,
    $plugin_definition,
{{ di.signature(services) }}
  ) {
    parent::__construct($configuration, $plugin_id, $plugin_definition);
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition): self {
    return new self(
      $configuration,
      $plugin_id,
      $plugin_definition,
{{ di.container(services) }}
    );
  }

{% endif %}
  /**
   * {@inheritdoc}
   */
{% if input_type == 'entity' %}
  public function validate($entity, Constraint $constraint): void {
    // @todo Validate the entity here.
    /** @var \Drupal\Core\Entity\EntityInterface $entity */
    if ($entity->label() === 'wrong') {
      // @DCG Use the following code to bind the violation to a specific field.
      // @code
      // $this->context->buildViolation($constraint->message)
      //   ->atPath('field_example')
      //   ->addViolation();
      // @endcode
      $this->context->addViolation($constraint->message);
    }
  }
{% elseif input_type == 'item_list' %}
  public function validate($items, Constraint $constraint): void {
    /** @var \Drupal\Core\TypedData\Plugin\DataType\ItemList $items */
    foreach ($items as $delta => $item) {
      // @todo Validate the item list here.
      if ($item->value === 'wrong') {
        $this->context->buildViolation($constraint->message)
          ->atPath($delta)
          ->addViolation();
      }
    }
  }
{% elseif input_type == 'item' %}
  public function validate($item, Constraint $constraint): void {
    /** @var \Drupal\Core\Field\FieldItemInterface $item */
    $value = $item->getValue()['value'];
    // @todo Validate the item value here.
    if ($value === 'wrong') {
      $this->context->addViolation($constraint->message);
    }
  }
{% else %}
  public function validate($value, Constraint $constraint): void {
    // @todo Validate the value here.
    if ($value === 'wrong') {
      $this->context->addViolation($constraint->message);
    }
  }
{% endif %}

}
